// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/Orange-OpenSource/travis-resource/travis (interfaces: AuthenticationInterface,RepositoriesInterface,BuildsInterface,JobsInterface,BranchesInterface,LogsInterface,CommitsInterface,RequestsInterface,UsersInterface)

package mock_travis

import (
	travis "github.com/Orange-OpenSource/travis-resource/travis"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
)

// Mock of AuthenticationInterface interface
type MockAuthenticationInterface struct {
	ctrl     *gomock.Controller
	recorder *_MockAuthenticationInterfaceRecorder
}

// Recorder for MockAuthenticationInterface (not exported)
type _MockAuthenticationInterfaceRecorder struct {
	mock *MockAuthenticationInterface
}

func NewMockAuthenticationInterface(ctrl *gomock.Controller) *MockAuthenticationInterface {
	mock := &MockAuthenticationInterface{ctrl: ctrl}
	mock.recorder = &_MockAuthenticationInterfaceRecorder{mock}
	return mock
}

func (_m *MockAuthenticationInterface) EXPECT() *_MockAuthenticationInterfaceRecorder {
	return _m.recorder
}

func (_m *MockAuthenticationInterface) UsingGithubToken(_param0 string) (travis.AccessToken, *http.Response, error) {
	ret := _m.ctrl.Call(_m, "UsingGithubToken", _param0)
	ret0, _ := ret[0].(travis.AccessToken)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockAuthenticationInterfaceRecorder) UsingGithubToken(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UsingGithubToken", arg0)
}

func (_m *MockAuthenticationInterface) UsingTravisToken(_param0 string) error {
	ret := _m.ctrl.Call(_m, "UsingTravisToken", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAuthenticationInterfaceRecorder) UsingTravisToken(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UsingTravisToken", arg0)
}

// Mock of RepositoriesInterface interface
type MockRepositoriesInterface struct {
	ctrl     *gomock.Controller
	recorder *_MockRepositoriesInterfaceRecorder
}

// Recorder for MockRepositoriesInterface (not exported)
type _MockRepositoriesInterfaceRecorder struct {
	mock *MockRepositoriesInterface
}

func NewMockRepositoriesInterface(ctrl *gomock.Controller) *MockRepositoriesInterface {
	mock := &MockRepositoriesInterface{ctrl: ctrl}
	mock.recorder = &_MockRepositoriesInterfaceRecorder{mock}
	return mock
}

func (_m *MockRepositoriesInterface) EXPECT() *_MockRepositoriesInterfaceRecorder {
	return _m.recorder
}

func (_m *MockRepositoriesInterface) Find(_param0 *travis.RepositoryListOptions) ([]travis.Repository, *http.Response, error) {
	ret := _m.ctrl.Call(_m, "Find", _param0)
	ret0, _ := ret[0].([]travis.Repository)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockRepositoriesInterfaceRecorder) Find(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Find", arg0)
}

func (_m *MockRepositoriesInterface) Get(_param0 uint) (*travis.Repository, *http.Response, error) {
	ret := _m.ctrl.Call(_m, "Get", _param0)
	ret0, _ := ret[0].(*travis.Repository)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockRepositoriesInterfaceRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockRepositoriesInterface) GetFromSlug(_param0 string) (*travis.Repository, *http.Response, error) {
	ret := _m.ctrl.Call(_m, "GetFromSlug", _param0)
	ret0, _ := ret[0].(*travis.Repository)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockRepositoriesInterfaceRecorder) GetFromSlug(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFromSlug", arg0)
}

// Mock of BuildsInterface interface
type MockBuildsInterface struct {
	ctrl     *gomock.Controller
	recorder *_MockBuildsInterfaceRecorder
}

// Recorder for MockBuildsInterface (not exported)
type _MockBuildsInterfaceRecorder struct {
	mock *MockBuildsInterface
}

func NewMockBuildsInterface(ctrl *gomock.Controller) *MockBuildsInterface {
	mock := &MockBuildsInterface{ctrl: ctrl}
	mock.recorder = &_MockBuildsInterfaceRecorder{mock}
	return mock
}

func (_m *MockBuildsInterface) EXPECT() *_MockBuildsInterfaceRecorder {
	return _m.recorder
}

func (_m *MockBuildsInterface) Cancel(_param0 uint) (*http.Response, error) {
	ret := _m.ctrl.Call(_m, "Cancel", _param0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBuildsInterfaceRecorder) Cancel(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Cancel", arg0)
}

func (_m *MockBuildsInterface) Get(_param0 uint) (*travis.Build, []travis.Job, *travis.Commit, *http.Response, error) {
	ret := _m.ctrl.Call(_m, "Get", _param0)
	ret0, _ := ret[0].(*travis.Build)
	ret1, _ := ret[1].([]travis.Job)
	ret2, _ := ret[2].(*travis.Commit)
	ret3, _ := ret[3].(*http.Response)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

func (_mr *_MockBuildsInterfaceRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockBuildsInterface) GetFirstBuildFromBuildNumber(_param0 string, _param1 string) (travis.Build, error) {
	ret := _m.ctrl.Call(_m, "GetFirstBuildFromBuildNumber", _param0, _param1)
	ret0, _ := ret[0].(travis.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBuildsInterfaceRecorder) GetFirstBuildFromBuildNumber(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFirstBuildFromBuildNumber", arg0, arg1)
}

func (_m *MockBuildsInterface) GetFirstFinishedBuild(_param0 string) (travis.Build, error) {
	ret := _m.ctrl.Call(_m, "GetFirstFinishedBuild", _param0)
	ret0, _ := ret[0].(travis.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBuildsInterfaceRecorder) GetFirstFinishedBuild(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFirstFinishedBuild", arg0)
}

func (_m *MockBuildsInterface) GetFirstFinishedBuildWithBranch(_param0 string, _param1 string) (travis.Build, error) {
	ret := _m.ctrl.Call(_m, "GetFirstFinishedBuildWithBranch", _param0, _param1)
	ret0, _ := ret[0].(travis.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBuildsInterfaceRecorder) GetFirstFinishedBuildWithBranch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFirstFinishedBuildWithBranch", arg0, arg1)
}

func (_m *MockBuildsInterface) List(_param0 *travis.BuildListOptions) ([]travis.Build, []travis.Job, []travis.Commit, *http.Response, error) {
	ret := _m.ctrl.Call(_m, "List", _param0)
	ret0, _ := ret[0].([]travis.Build)
	ret1, _ := ret[1].([]travis.Job)
	ret2, _ := ret[2].([]travis.Commit)
	ret3, _ := ret[3].(*http.Response)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

func (_mr *_MockBuildsInterfaceRecorder) List(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "List", arg0)
}

func (_m *MockBuildsInterface) ListFromRepository(_param0 string, _param1 *travis.BuildListOptions) ([]travis.Build, []travis.Job, []travis.Commit, *http.Response, error) {
	ret := _m.ctrl.Call(_m, "ListFromRepository", _param0, _param1)
	ret0, _ := ret[0].([]travis.Build)
	ret1, _ := ret[1].([]travis.Job)
	ret2, _ := ret[2].([]travis.Commit)
	ret3, _ := ret[3].(*http.Response)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

func (_mr *_MockBuildsInterfaceRecorder) ListFromRepository(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListFromRepository", arg0, arg1)
}

func (_m *MockBuildsInterface) ListFromRepositoryWithInfos(_param0 string, _param1 string, _param2 string, _param3 string, _param4 *travis.BuildListOptions) ([]travis.Build, []travis.Job, []travis.Commit, *http.Response, error) {
	ret := _m.ctrl.Call(_m, "ListFromRepositoryWithInfos", _param0, _param1, _param2, _param3, _param4)
	ret0, _ := ret[0].([]travis.Build)
	ret1, _ := ret[1].([]travis.Job)
	ret2, _ := ret[2].([]travis.Commit)
	ret3, _ := ret[3].(*http.Response)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

func (_mr *_MockBuildsInterfaceRecorder) ListFromRepositoryWithInfos(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListFromRepositoryWithInfos", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockBuildsInterface) Restart(_param0 uint) (*http.Response, error) {
	ret := _m.ctrl.Call(_m, "Restart", _param0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBuildsInterfaceRecorder) Restart(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Restart", arg0)
}

// Mock of JobsInterface interface
type MockJobsInterface struct {
	ctrl     *gomock.Controller
	recorder *_MockJobsInterfaceRecorder
}

// Recorder for MockJobsInterface (not exported)
type _MockJobsInterfaceRecorder struct {
	mock *MockJobsInterface
}

func NewMockJobsInterface(ctrl *gomock.Controller) *MockJobsInterface {
	mock := &MockJobsInterface{ctrl: ctrl}
	mock.recorder = &_MockJobsInterfaceRecorder{mock}
	return mock
}

func (_m *MockJobsInterface) EXPECT() *_MockJobsInterfaceRecorder {
	return _m.recorder
}

func (_m *MockJobsInterface) Cancel(_param0 uint) (*http.Response, error) {
	ret := _m.ctrl.Call(_m, "Cancel", _param0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockJobsInterfaceRecorder) Cancel(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Cancel", arg0)
}

func (_m *MockJobsInterface) Find(_param0 *travis.JobFindOptions) ([]travis.Job, *http.Response, error) {
	ret := _m.ctrl.Call(_m, "Find", _param0)
	ret0, _ := ret[0].([]travis.Job)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockJobsInterfaceRecorder) Find(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Find", arg0)
}

func (_m *MockJobsInterface) Get(_param0 uint) (*travis.Job, *http.Response, error) {
	ret := _m.ctrl.Call(_m, "Get", _param0)
	ret0, _ := ret[0].(*travis.Job)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockJobsInterfaceRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockJobsInterface) ListFromBuild(_param0 uint) ([]travis.Job, *http.Response, error) {
	ret := _m.ctrl.Call(_m, "ListFromBuild", _param0)
	ret0, _ := ret[0].([]travis.Job)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockJobsInterfaceRecorder) ListFromBuild(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListFromBuild", arg0)
}

func (_m *MockJobsInterface) RawLog(_param0 uint) ([]byte, *http.Response, error) {
	ret := _m.ctrl.Call(_m, "RawLog", _param0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockJobsInterfaceRecorder) RawLog(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RawLog", arg0)
}

func (_m *MockJobsInterface) RawLogOnlyResponse(_param0 uint) (*http.Response, error) {
	ret := _m.ctrl.Call(_m, "RawLogOnlyResponse", _param0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockJobsInterfaceRecorder) RawLogOnlyResponse(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RawLogOnlyResponse", arg0)
}

func (_m *MockJobsInterface) Restart(_param0 uint) (*http.Response, error) {
	ret := _m.ctrl.Call(_m, "Restart", _param0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockJobsInterfaceRecorder) Restart(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Restart", arg0)
}

// Mock of BranchesInterface interface
type MockBranchesInterface struct {
	ctrl     *gomock.Controller
	recorder *_MockBranchesInterfaceRecorder
}

// Recorder for MockBranchesInterface (not exported)
type _MockBranchesInterfaceRecorder struct {
	mock *MockBranchesInterface
}

func NewMockBranchesInterface(ctrl *gomock.Controller) *MockBranchesInterface {
	mock := &MockBranchesInterface{ctrl: ctrl}
	mock.recorder = &_MockBranchesInterfaceRecorder{mock}
	return mock
}

func (_m *MockBranchesInterface) EXPECT() *_MockBranchesInterfaceRecorder {
	return _m.recorder
}

func (_m *MockBranchesInterface) Get(_param0 string, _param1 uint) (*travis.Branch, *http.Response, error) {
	ret := _m.ctrl.Call(_m, "Get", _param0, _param1)
	ret0, _ := ret[0].(*travis.Branch)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockBranchesInterfaceRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1)
}

func (_m *MockBranchesInterface) GetFromSlug(_param0 string, _param1 string) (*travis.Branch, *http.Response, error) {
	ret := _m.ctrl.Call(_m, "GetFromSlug", _param0, _param1)
	ret0, _ := ret[0].(*travis.Branch)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockBranchesInterfaceRecorder) GetFromSlug(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFromSlug", arg0, arg1)
}

func (_m *MockBranchesInterface) ListFromRepository(_param0 string) ([]travis.Branch, *http.Response, error) {
	ret := _m.ctrl.Call(_m, "ListFromRepository", _param0)
	ret0, _ := ret[0].([]travis.Branch)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockBranchesInterfaceRecorder) ListFromRepository(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListFromRepository", arg0)
}

// Mock of LogsInterface interface
type MockLogsInterface struct {
	ctrl     *gomock.Controller
	recorder *_MockLogsInterfaceRecorder
}

// Recorder for MockLogsInterface (not exported)
type _MockLogsInterfaceRecorder struct {
	mock *MockLogsInterface
}

func NewMockLogsInterface(ctrl *gomock.Controller) *MockLogsInterface {
	mock := &MockLogsInterface{ctrl: ctrl}
	mock.recorder = &_MockLogsInterfaceRecorder{mock}
	return mock
}

func (_m *MockLogsInterface) EXPECT() *_MockLogsInterfaceRecorder {
	return _m.recorder
}

func (_m *MockLogsInterface) Get(_param0 uint) (*travis.Log, *http.Response, error) {
	ret := _m.ctrl.Call(_m, "Get", _param0)
	ret0, _ := ret[0].(*travis.Log)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockLogsInterfaceRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockLogsInterface) GetByJob(_param0 uint) (*travis.Log, *http.Response, error) {
	ret := _m.ctrl.Call(_m, "GetByJob", _param0)
	ret0, _ := ret[0].(*travis.Log)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockLogsInterfaceRecorder) GetByJob(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetByJob", arg0)
}

// Mock of CommitsInterface interface
type MockCommitsInterface struct {
	ctrl     *gomock.Controller
	recorder *_MockCommitsInterfaceRecorder
}

// Recorder for MockCommitsInterface (not exported)
type _MockCommitsInterfaceRecorder struct {
	mock *MockCommitsInterface
}

func NewMockCommitsInterface(ctrl *gomock.Controller) *MockCommitsInterface {
	mock := &MockCommitsInterface{ctrl: ctrl}
	mock.recorder = &_MockCommitsInterfaceRecorder{mock}
	return mock
}

func (_m *MockCommitsInterface) EXPECT() *_MockCommitsInterfaceRecorder {
	return _m.recorder
}

func (_m *MockCommitsInterface) GetFromBuild(_param0 uint) (*travis.Commit, *http.Response, error) {
	ret := _m.ctrl.Call(_m, "GetFromBuild", _param0)
	ret0, _ := ret[0].(*travis.Commit)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockCommitsInterfaceRecorder) GetFromBuild(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFromBuild", arg0)
}

func (_m *MockCommitsInterface) ListFromRepository(_param0 string) ([]travis.Commit, *http.Response, error) {
	ret := _m.ctrl.Call(_m, "ListFromRepository", _param0)
	ret0, _ := ret[0].([]travis.Commit)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockCommitsInterfaceRecorder) ListFromRepository(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListFromRepository", arg0)
}

// Mock of RequestsInterface interface
type MockRequestsInterface struct {
	ctrl     *gomock.Controller
	recorder *_MockRequestsInterfaceRecorder
}

// Recorder for MockRequestsInterface (not exported)
type _MockRequestsInterfaceRecorder struct {
	mock *MockRequestsInterface
}

func NewMockRequestsInterface(ctrl *gomock.Controller) *MockRequestsInterface {
	mock := &MockRequestsInterface{ctrl: ctrl}
	mock.recorder = &_MockRequestsInterfaceRecorder{mock}
	return mock
}

func (_m *MockRequestsInterface) EXPECT() *_MockRequestsInterfaceRecorder {
	return _m.recorder
}

func (_m *MockRequestsInterface) Get(_param0 uint) (*travis.Request, *travis.Commit, *http.Response, error) {
	ret := _m.ctrl.Call(_m, "Get", _param0)
	ret0, _ := ret[0].(*travis.Request)
	ret1, _ := ret[1].(*travis.Commit)
	ret2, _ := ret[2].(*http.Response)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockRequestsInterfaceRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockRequestsInterface) ListFromRepository(_param0 string, _param1 *travis.RequestsListOptions) ([]travis.Request, []travis.Commit, *http.Response, error) {
	ret := _m.ctrl.Call(_m, "ListFromRepository", _param0, _param1)
	ret0, _ := ret[0].([]travis.Request)
	ret1, _ := ret[1].([]travis.Commit)
	ret2, _ := ret[2].(*http.Response)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockRequestsInterfaceRecorder) ListFromRepository(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListFromRepository", arg0, arg1)
}

// Mock of UsersInterface interface
type MockUsersInterface struct {
	ctrl     *gomock.Controller
	recorder *_MockUsersInterfaceRecorder
}

// Recorder for MockUsersInterface (not exported)
type _MockUsersInterfaceRecorder struct {
	mock *MockUsersInterface
}

func NewMockUsersInterface(ctrl *gomock.Controller) *MockUsersInterface {
	mock := &MockUsersInterface{ctrl: ctrl}
	mock.recorder = &_MockUsersInterfaceRecorder{mock}
	return mock
}

func (_m *MockUsersInterface) EXPECT() *_MockUsersInterfaceRecorder {
	return _m.recorder
}

func (_m *MockUsersInterface) Get(_param0 uint) (*travis.User, *http.Response, error) {
	ret := _m.ctrl.Call(_m, "Get", _param0)
	ret0, _ := ret[0].(*travis.User)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockUsersInterfaceRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockUsersInterface) GetAuthenticated() (*travis.User, *http.Response, error) {
	ret := _m.ctrl.Call(_m, "GetAuthenticated")
	ret0, _ := ret[0].(*travis.User)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockUsersInterfaceRecorder) GetAuthenticated() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAuthenticated")
}

func (_m *MockUsersInterface) Sync() (*http.Response, error) {
	ret := _m.ctrl.Call(_m, "Sync")
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUsersInterfaceRecorder) Sync() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Sync")
}
